#!/usr/bin/env node

/**
 * Test des fixes de padding appliqu√©s
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ Test des fixes de padding appliqu√©s\n');

const screensToCheck = [
  { file: 'src/hooks/useSafeBottomPadding.ts', name: 'Hook useSafeBottomPadding' },
  { file: 'src/components/analysis/SwingContextForm.tsx', name: 'SwingContextForm' },
  { file: 'src/screens/AnalysisScreen.tsx', name: 'AnalysisScreen' },
  { file: 'src/screens/HomeScreen.tsx', name: 'HomeScreen' },
  { file: 'src/screens/ProfileScreen.tsx', name: 'ProfileScreen' }
];

let allGood = true;

screensToCheck.forEach(({ file, name }) => {
  const filePath = path.join(__dirname, file);
  
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    if (file.includes('useSafeBottomPadding.ts')) {
      // V√©rifier le hook
      const hasHook = content.includes('export function useSafeBottomPadding');
      const hasCalculation = content.includes('containerPaddingBottom');
      
      console.log(`üì± ${name}:`);
      console.log(`   Hook d√©fini: ${hasHook ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Calcul padding: ${hasCalculation ? '‚úÖ' : '‚ùå'}`);
      
      if (!hasHook || !hasCalculation) allGood = false;
    } else {
      // V√©rifier les √©crans
      const hasImport = content.includes('useSafeBottomPadding');
      const hasHookUsage = content.includes('containerPaddingBottom');
      const hasContentContainerStyle = content.includes('contentContainerStyle');
      
      console.log(`üì± ${name}:`);
      console.log(`   Import hook: ${hasImport ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Usage hook: ${hasHookUsage ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ContentContainerStyle: ${hasContentContainerStyle ? '‚úÖ' : '‚ùå'}`);
      
      if (!hasImport || !hasHookUsage || !hasContentContainerStyle) allGood = false;
    }
    console.log('');
  } else {
    console.log(`‚ùå ${name}: Fichier non trouv√©`);
    allGood = false;
  }
});

console.log('üéØ R√©sum√© du syst√®me de padding:');
console.log('');
console.log('üì± HOOK useSafeBottomPadding:');
console.log('‚Ä¢ Calcule automatiquement le padding n√©cessaire');
console.log('‚Ä¢ Prend en compte la hauteur de la tab bar (60px)');
console.log('‚Ä¢ Ajoute un padding suppl√©mentaire (20px)');
console.log('‚Ä¢ Compatible avec les safe areas iOS/Android');
console.log('‚Ä¢ Retourne containerPaddingBottom pour ScrollView');
console.log('');
console.log('üîß √âCRANS MODIFI√âS:');
console.log('‚Ä¢ Import du hook dans chaque √©cran');
console.log('‚Ä¢ Utilisation du hook: const { containerPaddingBottom } = useSafeBottomPadding()');
console.log('‚Ä¢ Application via contentContainerStyle={{ paddingBottom: containerPaddingBottom }}');
console.log('‚Ä¢ Suppression des marginBottom fixes');
console.log('');
console.log('üìã AVANTAGES:');
console.log('‚Ä¢ Plus de boutons cach√©s par la barre de navigation');
console.log('‚Ä¢ Padding adaptatif selon l\'appareil');
console.log('‚Ä¢ Gestion centralis√©e et coh√©rente');
console.log('‚Ä¢ Compatible avec tous les types d\'√©crans');

if (allGood) {
  console.log('\n‚úÖ Tous les fixes de padding sont correctement appliqu√©s !');
  console.log('üé¨ Les boutons ne devraient plus √™tre cach√©s par la barre de navigation');
} else {
  console.log('\n‚ö†Ô∏è Certains fixes ne sont pas complets');
  console.log('üîß V√©rifiez les √©l√©ments marqu√©s ‚ùå ci-dessus');
}

console.log('\nüß™ Test maintenant:');
console.log('1. Recharge l\'app dans Expo Go');
console.log('2. Navigue entre les diff√©rents √©crans');
console.log('3. V√©rifie que tous les boutons sont visibles');
console.log('4. Teste sur diff√©rentes tailles d\'√©cran si possible');
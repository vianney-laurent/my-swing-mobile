#!/usr/bin/env node

/**
 * Analyse approfondie des erreurs 400 Gemini
 * Examine en d√©tail les donn√©es envoy√©es √† l'API
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });

console.log('üîç Analyse approfondie des erreurs 400 Gemini...\n');

async function analyzeRequestData() {
  console.log('üìã 1. Analyse des donn√©es de requ√™te...\n');
  
  // Test 1: V√©rifier la cl√© API
  const apiKey = process.env.EXPO_PUBLIC_GOOGLE_GENERATIVE_AI_API_KEY;
  if (!apiKey) {
    console.log('‚ùå ERREUR CRITIQUE: Cl√© API manquante');
    return false;
  }
  
  console.log('‚úÖ Cl√© API pr√©sente');
  console.log(`   Longueur: ${apiKey.length} caract√®res`);
  console.log(`   Format: ${apiKey.startsWith('AIza') ? 'Valide' : 'Invalide'}`);
  
  // Test 2: Initialiser Gemini
  try {
    const genAI = new GoogleGenerativeAI(apiKey);
    console.log('‚úÖ GoogleGenerativeAI initialis√©');
    
    // Test 3: Tester diff√©rents mod√®les
    const modelsToTest = [
      'gemini-2.5-flash',
      'gemini-2.0-flash', 
      'gemini-1.5-pro',
      'gemini-1.5-flash'
    ];
    
    console.log('\nüß™ Test des mod√®les disponibles:');
    
    for (const modelName of modelsToTest) {
      try {
        console.log(`\n   Testing ${modelName}...`);
        
        const model = genAI.getGenerativeModel({ 
          model: modelName,
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 100,
            topP: 0.8,
            topK: 40
          }
        });
        
        const result = await model.generateContent('Bonjour, r√©ponds juste "OK"');
        const response = await result.response;
        const text = response.text();
        
        console.log(`   ‚úÖ ${modelName}: Fonctionne (${text.trim()})`);
        
      } catch (error) {
        console.log(`   ‚ùå ${modelName}: ${error.message}`);
        
        if (error.message.includes('400')) {
          console.log(`      ‚Üí Erreur 400: Mod√®le invalide ou param√®tres incorrects`);
        } else if (error.message.includes('404')) {
          console.log(`      ‚Üí Erreur 404: Mod√®le non trouv√©`);
        } else if (error.message.includes('403')) {
          console.log(`      ‚Üí Erreur 403: Acc√®s refus√© (quota/permissions)`);
        }
      }
    }
    
    return true;
    
  } catch (error) {
    console.log('‚ùå Erreur d\'initialisation:', error.message);
    return false;
  }
}

async function analyzeVideoData() {
  console.log('\nüé¨ 2. Analyse des donn√©es vid√©o...\n');
  
  // Test avec diff√©rents formats de donn√©es vid√©o
  const testCases = [
    {
      name: 'Base64 vide',
      data: '',
      shouldFail: true
    },
    {
      name: 'Base64 invalide (caract√®res sp√©ciaux)',
      data: 'invalid-base64-with-special-chars!@#$%',
      shouldFail: true
    },
    {
      name: 'Base64 trop court',
      data: 'VGVzdA==', // "Test" en base64
      shouldFail: true
    },
    {
      name: 'Base64 valide mais pas vid√©o',
      data: 'VGVzdCBjb250ZW50IGZvciB2YWxpZGF0aW9u'.repeat(100), // Texte r√©p√©t√©
      shouldFail: true
    },
    {
      name: 'WebP minimal (fake video)',
      data: 'UklGRiQAAABXRUJQVlA4IBgAAAAwAQCdASoBAAEAAwA0JaQAA3AA/vuUAAA=',
      shouldFail: false
    }
  ];
  
  for (const testCase of testCases) {
    console.log(`\n   Test: ${testCase.name}`);
    
    // Validation base64
    const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;
    const isValidBase64 = base64Regex.test(testCase.data);
    console.log(`   Format base64: ${isValidBase64 ? '‚úÖ' : '‚ùå'}`);
    
    // Validation taille
    const sizeMB = (testCase.data.length * 3) / (4 * 1024 * 1024);
    console.log(`   Taille estim√©e: ${sizeMB.toFixed(4)} MB`);
    
    // Validation longueur
    console.log(`   Longueur: ${testCase.data.length} caract√®res`);
    
    const shouldPass = !testCase.shouldFail && isValidBase64 && testCase.data.length >= 10000 && sizeMB <= 15;
    console.log(`   Validation attendue: ${shouldPass ? '‚úÖ Devrait passer' : '‚ùå Devrait √©chouer'}`);
  }
}

async function analyzePromptData() {
  console.log('\nüìù 3. Analyse des prompts...\n');
  
  // Analyser la structure du prompt
  const samplePrompt = `Vous √™tes un instructeur de golf expert analysant un swing de golf complet √† partir d'une vid√©o.

IMPORTANT: R√©pondez UNIQUEMENT en fran√ßais. Tous les textes, commentaires et analyses doivent √™tre en fran√ßais.

PROFIL UTILISATEUR :
- Nom : Test User
- Index de golf : 15
- Main dominante : Droitier
- Ville : Paris

CONTEXTE DU SWING :
Club utilis√© : Driver (Bois)
INSTRUCTIONS SP√âCIFIQUES :
- Analysez la mont√©e large et le plan de swing plus plat
- V√©rifiez le transfert de poids et la rotation des hanches

ANGLE DE PRISE DE VUE : De profil (vue lat√©rale)

Niveau du joueur : intermediate

Instructions pour le niveau intermediate :
Analysez le plan de swing, le tempo, le transfert de poids et la trajectoire du club.

Analysez la vid√©o compl√®te du swing et fournissez une √©valuation d√©taill√©e dans ce format JSON EXACT :

{
  "overallScore": <nombre 1-100>,
  "confidence": <nombre 1-100>,
  "strengths": [
    {
      "strength": "<ce qu'ils font bien en fran√ßais>",
      "evidence": "<√† quel moment dans la vid√©o en fran√ßais>",
      "impact": "<high/medium/low>"
    }
  ]
}`;

  console.log('   Longueur du prompt:', samplePrompt.length, 'caract√®res');
  console.log('   Contient des caract√®res sp√©ciaux:', /[^\x00-\x7F]/.test(samplePrompt) ? '‚úÖ Oui (accents fran√ßais)' : '‚ùå Non');
  console.log('   Format JSON demand√©:', samplePrompt.includes('"overallScore"') ? '‚úÖ Oui' : '‚ùå Non');
  
  // V√©rifier les caract√®res probl√©matiques
  const problematicChars = samplePrompt.match(/[^\x00-\x7F]/g);
  if (problematicChars) {
    const uniqueChars = [...new Set(problematicChars)];
    console.log('   Caract√®res non-ASCII:', uniqueChars.join(', '));
  }
}

async function testActualRequest() {
  console.log('\nüöÄ 4. Test de requ√™te r√©elle...\n');
  
  try {
    const apiKey = process.env.EXPO_PUBLIC_GOOGLE_GENERATIVE_AI_API_KEY;
    const genAI = new GoogleGenerativeAI(apiKey);
    
    // Utiliser le mod√®le qui fonctionne le mieux
    const model = genAI.getGenerativeModel({ 
      model: 'gemini-2.5-flash',
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 1000,
        topP: 0.8,
        topK: 40
      }
    });
    
    // Prompt simplifi√© pour test
    const testPrompt = `Analysez cette vid√©o de golf et r√©pondez en JSON:
{
  "score": 85,
  "message": "Test r√©ussi"
}`;
    
    // Donn√©es vid√©o minimales mais valides
    const minimalVideoBase64 = 'UklGRiQAAABXRUJQVlA4IBgAAAAwAQCdASoBAAEAAwA0JaQAA3AA/vuUAAA=';
    
    const videoPart = {
      inlineData: {
        data: minimalVideoBase64,
        mimeType: 'video/mp4'
      }
    };
    
    console.log('   Envoi de la requ√™te test...');
    console.log('   Prompt:', testPrompt.length, 'caract√®res');
    console.log('   Vid√©o:', minimalVideoBase64.length, 'caract√®res');
    console.log('   MIME type:', videoPart.inlineData.mimeType);
    
    const result = await model.generateContent([testPrompt, videoPart]);
    const response = await result.response;
    const text = response.text();
    
    console.log('   ‚úÖ Requ√™te r√©ussie !');
    console.log('   R√©ponse:', text.substring(0, 200) + '...');
    
    return true;
    
  } catch (error) {
    console.log('   ‚ùå Requ√™te √©chou√©e:', error.message);
    
    // Analyse d√©taill√©e de l'erreur
    if (error.message.includes('400')) {
      console.log('\n   üîç Analyse de l\'erreur 400:');
      
      if (error.message.includes('invalid argument')) {
        console.log('   ‚Üí "Invalid argument" peut indiquer:');
        console.log('     ‚Ä¢ Mod√®le inexistant ou non accessible');
        console.log('     ‚Ä¢ Param√®tres de g√©n√©ration invalides');
        console.log('     ‚Ä¢ Format de donn√©es incorrect');
        console.log('     ‚Ä¢ MIME type non support√©');
      }
      
      if (error.message.includes('INVALID_ARGUMENT')) {
        console.log('   ‚Üí Code INVALID_ARGUMENT indique:');
        console.log('     ‚Ä¢ Structure de requ√™te malform√©e');
        console.log('     ‚Ä¢ Champs requis manquants');
        console.log('     ‚Ä¢ Valeurs hors limites');
      }
    }
    
    return false;
  }
}

async function runFullAnalysis() {
  console.log('üöÄ D√©marrage de l\'analyse compl√®te...\n');
  
  const step1 = await analyzeRequestData();
  await analyzeVideoData();
  await analyzePromptData();
  const step4 = await testActualRequest();
  
  console.log('\nüìä R√©sum√© de l\'analyse:');
  console.log(`   Configuration API: ${step1 ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Test de requ√™te: ${step4 ? '‚úÖ' : '‚ùå'}`);
  
  if (!step1 || !step4) {
    console.log('\nüîß Actions recommand√©es:');
    console.log('   1. V√©rifiez votre cl√© API Google Generative AI');
    console.log('   2. Testez avec gemini-1.5-pro si 2.5-flash ne fonctionne pas');
    console.log('   3. V√©rifiez les quotas et limites de votre compte');
    console.log('   4. Simplifiez le prompt et les donn√©es vid√©o');
  } else {
    console.log('\nüéâ Configuration fonctionnelle !');
    console.log('   Le probl√®me pourrait venir des donn√©es sp√©cifiques envoy√©es');
  }
}

runFullAnalysis().catch(console.error);
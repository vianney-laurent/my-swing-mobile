#!/usr/bin/env node

/**
 * Script pour v√©rifier les analyses orphelines (sans vid√©o)
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkOrphanedAnalyses() {
  console.log('üîç V√©rification des analyses orphelines');
  console.log('=' .repeat(50));
  console.log('');

  try {
    // 1. V√©rifier l'authentification
    console.log('üîê V√©rification de l\'authentification...');
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.log('‚ùå Utilisateur non authentifi√©');
      return;
    }
    
    console.log('‚úÖ Utilisateur authentifi√©:', user.email);
    console.log('');

    // 2. R√©cup√©rer toutes les analyses
    console.log('üìä R√©cup√©ration de toutes les analyses...');
    const { data: analyses, error: analysesError } = await supabase
      .from('analyses')
      .select('id, video_url, created_at, overall_score, club_used')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (analysesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des analyses:', analysesError);
      return;
    }

    if (!analyses || analyses.length === 0) {
      console.log('‚ÑπÔ∏è Aucune analyse trouv√©e');
      return;
    }

    console.log(`‚úÖ ${analyses.length} analyses trouv√©es`);
    console.log('');

    // 3. V√©rifier chaque analyse
    let validCount = 0;
    let orphanedCount = 0;
    let noVideoCount = 0;

    console.log('üîç V√©rification de chaque analyse...');
    console.log('');

    for (const analysis of analyses) {
      const date = new Date(analysis.created_at).toLocaleDateString();
      const score = analysis.overall_score || 'N/A';
      const club = analysis.club_used || 'N/A';
      
      console.log(`üìã Analyse ${analysis.id.substring(0, 8)}... (${date})`);
      console.log(`   Score: ${score} | Club: ${club}`);
      
      if (!analysis.video_url) {
        console.log('   üìπ Statut: Pas d\'URL vid√©o');
        noVideoCount++;
        continue;
      }

      // Extraire le chemin vid√©o
      let videoPath = analysis.video_url;
      if (analysis.video_url.includes('sign/')) {
        const pathMatch = analysis.video_url.match(/\/storage\/v1\/object\/sign\/videos\/(.+?)\?/);
        if (pathMatch) {
          videoPath = pathMatch[1];
        }
      }

      // V√©rifier si le fichier existe
      try {
        const { data: fileData, error: fileError } = await supabase.storage
          .from('videos')
          .list(videoPath.split('/')[0], {
            search: videoPath.split('/')[1]
          });

        if (fileError || !fileData || fileData.length === 0) {
          console.log('   üìπ Statut: ‚ùå Vid√©o manquante (orpheline)');
          orphanedCount++;
        } else {
          console.log('   üìπ Statut: ‚úÖ Vid√©o disponible');
          validCount++;
        }
      } catch (error) {
        console.log('   üìπ Statut: ‚ùå Erreur de v√©rification');
        orphanedCount++;
      }
      
      console.log('');
    }

    // 4. R√©sum√©
    console.log('üìä R√âSUM√â:');
    console.log('=' .repeat(30));
    console.log(`Total analyses: ${analyses.length}`);
    console.log(`‚úÖ Avec vid√©o valide: ${validCount}`);
    console.log(`‚ùå Vid√©o manquante (orphelines): ${orphanedCount}`);
    console.log(`‚ÑπÔ∏è Sans URL vid√©o: ${noVideoCount}`);
    console.log('');

    if (orphanedCount > 0) {
      console.log('üí° RECOMMANDATIONS:');
      console.log(`   - ${orphanedCount} analyses ont des vid√©os manquantes`);
      console.log('   - Ces analyses restent consultables (texte seulement)');
      console.log('   - L\'app g√®re gracieusement les vid√©os manquantes');
      console.log('   - Aucune action requise c√¥t√© utilisateur');
      console.log('');
      console.log('üîß OPTIONS DE NETTOYAGE:');
      console.log('   - Garder les analyses (recommand√©)');
      console.log('   - Supprimer les analyses orphelines (optionnel)');
    } else {
      console.log('üéâ Toutes les analyses ont leurs vid√©os disponibles !');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

// Fonction principale
async function main() {
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    console.log('Usage: node scripts/check-orphaned-analyses.js');
    console.log('');
    console.log('Ce script v√©rifie quelles analyses ont des vid√©os manquantes.');
    console.log('Il ne supprime rien, juste un rapport informatif.');
    return;
  }
  
  await checkOrphanedAnalyses();
}

if (require.main === module) {
  main().catch(console.error);
}
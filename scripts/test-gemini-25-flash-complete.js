#!/usr/bin/env node

/**
 * Test complet de gemini-2.5-flash avec toutes les am√©liorations
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });

console.log('üß™ Test complet de gemini-2.5-flash...\n');

// Fonction de d√©tection MIME type (copie de celle du service)
function detectVideoMimeType(videoBase64) {
  try {
    const firstBytes = Buffer.from(videoBase64.substring(0, 20), 'base64');
    const bytes = new Uint8Array(firstBytes);
    
    // Signatures de fichiers vid√©o
    if (bytes[0] === 0x00 && bytes[1] === 0x00 && bytes[2] === 0x00 && bytes[3] === 0x18) {
      return 'video/mp4'; // MP4
    }
    if (bytes[0] === 0x00 && bytes[1] === 0x00 && bytes[2] === 0x00 && bytes[3] === 0x20) {
      return 'video/mp4'; // MP4 variant
    }
    if (bytes[0] === 0x1A && bytes[1] === 0x45 && bytes[2] === 0xDF && bytes[3] === 0xA3) {
      return 'video/webm'; // WebM
    }
    if (bytes[0] === 0x52 && bytes[1] === 0x49 && bytes[2] === 0x46 && bytes[3] === 0x46) {
      return 'video/avi'; // AVI
    }
    
    return 'video/mp4'; // Fallback
    
  } catch (error) {
    return 'video/mp4'; // Fallback s√ªr
  }
}

// Fonction de validation (copie de celle du service)
function validateGeminiRequest(videoPart, prompt) {
  console.log('üîç Validation de la requ√™te...');
  
  // 1. V√©rifier la structure videoPart
  if (!videoPart || !videoPart.inlineData) {
    throw new Error('Structure videoPart invalide');
  }
  
  if (!videoPart.inlineData.data || !videoPart.inlineData.mimeType) {
    throw new Error('Donn√©es videoPart incompl√®tes');
  }
  
  // 2. V√©rifier le MIME type
  const validMimeTypes = ['video/mp4', 'video/webm', 'video/avi', 'video/quicktime'];
  if (!validMimeTypes.includes(videoPart.inlineData.mimeType)) {
    throw new Error(`MIME type non support√©: ${videoPart.inlineData.mimeType}`);
  }
  
  // 3. V√©rifier le prompt
  if (!prompt || prompt.length === 0) {
    throw new Error('Prompt vide');
  }
  
  if (prompt.length > 50000) {
    throw new Error(`Prompt trop long: ${prompt.length} caract√®res (max 50000)`);
  }
  
  // 4. V√©rifier la taille totale
  const totalSize = videoPart.inlineData.data.length + prompt.length;
  const totalSizeMB = totalSize / (1024 * 1024);
  
  if (totalSizeMB > 20) {
    throw new Error(`Requ√™te trop volumineuse: ${totalSizeMB.toFixed(2)}MB (max 20MB)`);
  }
  
  console.log('‚úÖ Validation r√©ussie');
  console.log(`   MIME type: ${videoPart.inlineData.mimeType}`);
  console.log(`   Taille vid√©o: ${(videoPart.inlineData.data.length / 1024).toFixed(0)} KB`);
  console.log(`   Taille prompt: ${prompt.length} caract√®res`);
  console.log(`   Taille totale: ${totalSizeMB.toFixed(2)} MB`);
}

async function testGemini25Flash() {
  try {
    // 1. V√©rifier la cl√© API
    const apiKey = process.env.EXPO_PUBLIC_GOOGLE_GENERATIVE_AI_API_KEY;
    if (!apiKey) {
      console.log('‚ùå Cl√© API Gemini manquante');
      return false;
    }
    
    console.log('‚úÖ Cl√© API Gemini trouv√©e');
    
    // 2. Initialiser Gemini
    const genAI = new GoogleGenerativeAI(apiKey);
    
    // 3. Test simple d'abord
    console.log('\nüîÑ Test simple avec gemini-2.5-flash...');
    
    const model = genAI.getGenerativeModel({ 
      model: 'gemini-2.5-flash',
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 200,
        topP: 0.8,
        topK: 40
      }
    });
    
    const simpleResult = await model.generateContent('Bonjour ! R√©ponds juste "Test r√©ussi" en fran√ßais.');
    const simpleResponse = await simpleResult.response;
    const simpleText = simpleResponse.text();
    
    console.log('‚úÖ Test simple r√©ussi !');
    console.log('üìù R√©ponse:', simpleText.trim());
    
    // 4. Test avec vid√©o factice mais structure correcte
    console.log('\nüé¨ Test avec donn√©es vid√©o...');
    
    // Cr√©er une vid√©o factice mais avec une signature MP4 valide
    const fakeMP4Header = Buffer.from([
      0x00, 0x00, 0x00, 0x18, // MP4 signature
      0x66, 0x74, 0x79, 0x70, // ftyp
      0x6D, 0x70, 0x34, 0x32  // mp42
    ]);
    const fakeVideoData = Buffer.concat([
      fakeMP4Header,
      Buffer.alloc(1000, 0) // Padding pour avoir une taille raisonnable
    ]);
    const fakeVideoBase64 = fakeVideoData.toString('base64');
    
    // D√©tecter le MIME type
    const detectedMimeType = detectVideoMimeType(fakeVideoBase64);
    console.log(`üîç MIME type d√©tect√©: ${detectedMimeType}`);
    
    // Pr√©parer les donn√©es
    const videoPart = {
      inlineData: {
        data: fakeVideoBase64,
        mimeType: detectedMimeType
      }
    };
    
    const prompt = `Analysez cette vid√©o de golf et r√©pondez en JSON:
{
  "overallScore": 85,
  "confidence": 90,
  "message": "Test avec vid√©o r√©ussi"
}`;
    
    // Valider avant envoi
    validateGeminiRequest(videoPart, prompt);
    
    // Envoyer la requ√™te
    console.log('üì§ Envoi de la requ√™te avec vid√©o...');
    const videoResult = await model.generateContent([prompt, videoPart]);
    const videoResponse = await videoResult.response;
    const videoText = videoResponse.text();
    
    console.log('‚úÖ Test avec vid√©o r√©ussi !');
    console.log('üìù R√©ponse:', videoText.substring(0, 200) + '...');
    
    return true;
    
  } catch (error) {
    console.log('‚ùå Test √©chou√©:', error.message);
    
    // Analyse d√©taill√©e de l'erreur
    if (error.message.includes('400')) {
      console.log('\nüîç Analyse de l\'erreur 400:');
      console.log('   Causes possibles:');
      console.log('   ‚Ä¢ Mod√®le gemini-2.5-flash non disponible dans votre r√©gion');
      console.log('   ‚Ä¢ Param√®tres de g√©n√©ration invalides');
      console.log('   ‚Ä¢ Format de donn√©es vid√©o incorrect');
      console.log('   ‚Ä¢ Quota API d√©pass√©');
      
      console.log('\nüîß Solutions √† essayer:');
      console.log('   1. Utiliser gemini-1.5-pro √† la place');
      console.log('   2. R√©duire la taille des donn√©es');
      console.log('   3. Simplifier le prompt');
      console.log('   4. V√©rifier les quotas API');
    }
    
    if (error.message.includes('404')) {
      console.log('\nüîç Erreur 404: Mod√®le non trouv√©');
      console.log('   Le mod√®le gemini-2.5-flash n\'existe peut-√™tre pas encore');
      console.log('   Essayez gemini-2.0-flash ou gemini-1.5-pro');
    }
    
    return false;
  }
}

async function testFallbackModels() {
  console.log('\nüîÑ Test des mod√®les de fallback...\n');
  
  const apiKey = process.env.EXPO_PUBLIC_GOOGLE_GENERATIVE_AI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const fallbackModels = [
    'gemini-2.0-flash',
    'gemini-1.5-pro',
    'gemini-1.5-flash'
  ];
  
  for (const modelName of fallbackModels) {
    try {
      console.log(`   Testing ${modelName}...`);
      
      const model = genAI.getGenerativeModel({ 
        model: modelName,
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 100
        }
      });
      
      const result = await model.generateContent('R√©ponds "OK" en fran√ßais');
      const response = await result.response;
      const text = response.text();
      
      console.log(`   ‚úÖ ${modelName}: Fonctionne (${text.trim()})`);
      
    } catch (error) {
      console.log(`   ‚ùå ${modelName}: ${error.message.substring(0, 100)}...`);
    }
  }
}

async function runCompleteTest() {
  console.log('üöÄ D√©marrage du test complet...\n');
  
  const gemini25Success = await testGemini25Flash();
  await testFallbackModels();
  
  console.log('\nüìä R√©sum√© des tests:');
  console.log(`   Gemini 2.5 Flash: ${gemini25Success ? '‚úÖ Fonctionne' : '‚ùå √âchec'}`);
  
  if (gemini25Success) {
    console.log('\nüéâ Gemini 2.5 Flash fonctionne parfaitement !');
    console.log('üí° Toutes les am√©liorations sont op√©rationnelles:');
    console.log('   ‚Ä¢ D√©tection automatique du MIME type');
    console.log('   ‚Ä¢ Validation stricte des donn√©es');
    console.log('   ‚Ä¢ Configuration optimis√©e');
  } else {
    console.log('\n‚ö†Ô∏è  Gemini 2.5 Flash ne fonctionne pas');
    console.log('üîß Utilisez un mod√®le de fallback qui fonctionne');
  }
}

runCompleteTest().catch(console.error);
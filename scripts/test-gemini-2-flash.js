#!/usr/bin/env node

/**
 * Test rapide du mod√®le gemini-2.0-flash
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });

console.log('üß™ Test du mod√®le gemini-2.0-flash...\n');

async function testGemini2Flash() {
  try {
    // V√©rifier la cl√© API
    const apiKey = process.env.EXPO_PUBLIC_GOOGLE_GENERATIVE_AI_API_KEY;
    if (!apiKey) {
      console.log('‚ùå Cl√© API Gemini manquante');
      return false;
    }
    
    console.log('‚úÖ Cl√© API Gemini trouv√©e');
    
    // Initialiser Gemini
    const genAI = new GoogleGenerativeAI(apiKey);
    
    // Tester avec gemini-2.0-flash
    console.log('üîÑ Test du mod√®le gemini-2.0-flash...');
    
    const model = genAI.getGenerativeModel({ 
      model: 'gemini-2.0-flash',
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 200,
        topP: 0.8,
        topK: 40
      }
    });
    
    // Test simple en fran√ßais
    console.log('üì§ Envoi d\'une requ√™te de test...');
    const result = await model.generateContent('Bonjour ! Peux-tu me donner un conseil de golf en fran√ßais ?');
    const response = await result.response;
    const text = response.text();
    
    console.log('‚úÖ Test r√©ussi !');
    console.log('üìù R√©ponse Gemini:');
    console.log('---');
    console.log(text);
    console.log('---\n');
    
    // Test avec une vid√©o factice (base64 minimal)
    console.log('üé¨ Test avec donn√©es vid√©o factices...');
    
    const fakeVideoBase64 = 'UklGRiQAAABXRUJQVlA4IBgAAAAwAQCdASoBAAEAAwA0JaQAA3AA/vuUAAA='; // WebP minimal
    
    const videoPart = {
      inlineData: {
        data: fakeVideoBase64,
        mimeType: 'video/mp4'
      }
    };
    
    try {
      const videoResult = await model.generateContent([
        'Analyse cette vid√©o de golf (m√™me si c\'est factice, r√©ponds juste "Vid√©o re√ßue")',
        videoPart
      ]);
      const videoResponse = await videoResult.response;
      const videoText = videoResponse.text();
      
      console.log('‚úÖ Test vid√©o r√©ussi !');
      console.log('üìù R√©ponse:', videoText.substring(0, 100) + '...');
      
    } catch (videoError) {
      console.log('‚ö†Ô∏è  Test vid√©o √©chou√© (normal avec donn√©es factices):', videoError.message);
    }
    
    return true;
    
  } catch (error) {
    console.log('‚ùå Test √©chou√©:', error.message);
    
    if (error.message.includes('400')) {
      console.log('\nüîç Erreur 400 d√©tect√©e. Causes possibles:');
      console.log('   - Mod√®le non disponible dans votre r√©gion');
      console.log('   - Cl√© API invalide ou expir√©e');
      console.log('   - Param√®tres de g√©n√©ration incorrects');
      console.log('   - Quota API d√©pass√©');
    }
    
    if (error.message.includes('404')) {
      console.log('\nüîç Erreur 404 : Le mod√®le gemini-2.0-flash n\'existe pas ou n\'est pas accessible');
      console.log('   - V√©rifiez que le mod√®le est disponible dans votre r√©gion');
      console.log('   - Essayez gemini-1.5-pro ou gemini-1.5-flash');
    }
    
    return false;
  }
}

async function runTest() {
  console.log('üöÄ D√©marrage du test gemini-2.0-flash...\n');
  
  const success = await testGemini2Flash();
  
  console.log('\nüìä R√©sultat du test:');
  console.log(`   Mod√®le gemini-2.0-flash: ${success ? '‚úÖ Fonctionne' : '‚ùå √âchec'}`);
  
  if (success) {
    console.log('\nüéâ Le mod√®le gemini-2.0-flash fonctionne parfaitement !');
    console.log('üí° Vous pouvez maintenant tester l\'analyse compl√®te');
  } else {
    console.log('\n‚ö†Ô∏è  Le mod√®le gemini-2.0-flash ne fonctionne pas');
    console.log('üîß Solutions possibles:');
    console.log('   1. V√©rifiez votre cl√© API');
    console.log('   2. V√©rifiez votre connexion internet');
    console.log('   3. Essayez gemini-1.5-pro √† la place');
  }
}

runTest().catch(console.error);
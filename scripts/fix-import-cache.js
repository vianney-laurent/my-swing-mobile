#!/usr/bin/env node

/**
 * Script pour nettoyer le cache Metro et r√©soudre les probl√®mes d'import
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß Nettoyage du cache Metro et r√©solution des imports...\n');

try {
  // 1. Nettoyer le cache Metro
  console.log('üßπ Nettoyage du cache Metro...');
  try {
    execSync('npx expo start --clear', { stdio: 'inherit', cwd: process.cwd() });
  } catch (error) {
    console.log('‚ö†Ô∏è  Expo start failed, trying alternative cleanup...');
    
    // Alternative: nettoyer manuellement les caches
    const cacheDirectories = [
      path.join(process.cwd(), 'node_modules/.cache'),
      path.join(require('os').tmpdir(), 'metro-*'),
      path.join(require('os').tmpdir(), 'react-*')
    ];
    
    cacheDirectories.forEach(dir => {
      if (fs.existsSync(dir)) {
        console.log(`   Suppression de ${dir}`);
        try {
          fs.rmSync(dir, { recursive: true, force: true });
        } catch (e) {
          console.log(`   ‚ö†Ô∏è  Impossible de supprimer ${dir}`);
        }
      }
    });
  }
  
  // 2. V√©rifier que le fichier mobile-analysis-service.ts existe et est valide
  console.log('\nüìã V√©rification du fichier mobile-analysis-service.ts...');
  const serviceFile = path.join(process.cwd(), 'src/lib/analysis/mobile-analysis-service.ts');
  
  if (!fs.existsSync(serviceFile)) {
    console.log('‚ùå Fichier mobile-analysis-service.ts manquant !');
    process.exit(1);
  }
  
  const content = fs.readFileSync(serviceFile, 'utf8');
  
  // V√©rifier les exports essentiels
  const hasAnalysisProgress = content.includes('export interface AnalysisProgress');
  const hasMobileAnalysisService = content.includes('export const mobileAnalysisService');
  const hasClass = content.includes('export class MobileAnalysisService');
  
  console.log('   Exports trouv√©s:');
  console.log(`   - AnalysisProgress: ${hasAnalysisProgress ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - MobileAnalysisService class: ${hasClass ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - mobileAnalysisService instance: ${hasMobileAnalysisService ? '‚úÖ' : '‚ùå'}`);
  
  if (!hasAnalysisProgress || !hasMobileAnalysisService || !hasClass) {
    console.log('‚ùå Exports manquants dans mobile-analysis-service.ts');
    process.exit(1);
  }
  
  // 3. V√©rifier les imports dans CameraScreen.tsx
  console.log('\nüì± V√©rification des imports dans CameraScreen.tsx...');
  const cameraScreenFile = path.join(process.cwd(), 'src/screens/CameraScreen.tsx');
  
  if (fs.existsSync(cameraScreenFile)) {
    const cameraContent = fs.readFileSync(cameraScreenFile, 'utf8');
    const hasImport = cameraContent.includes("from '../lib/analysis/mobile-analysis-service'");
    
    console.log(`   Import mobile-analysis-service: ${hasImport ? '‚úÖ' : '‚ùå'}`);
    
    if (!hasImport) {
      console.log('‚ö†Ô∏è  Import manquant dans CameraScreen.tsx');
    }
  }
  
  console.log('\n‚úÖ V√©rifications termin√©es');
  console.log('\nüí° Solutions pour r√©soudre le probl√®me:');
  console.log('   1. Red√©marrer Metro bundler: npx expo start --clear');
  console.log('   2. Red√©marrer VS Code / votre √©diteur');
  console.log('   3. V√©rifier que tous les fichiers sont sauvegard√©s');
  console.log('   4. Si le probl√®me persiste, red√©marrer la machine');
  
} catch (error) {
  console.error('‚ùå Erreur lors du nettoyage:', error.message);
  process.exit(1);
}
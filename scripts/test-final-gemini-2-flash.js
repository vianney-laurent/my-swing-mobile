#!/usr/bin/env node

/**
 * Test final de gemini-2.0-flash avec toutes les am√©liorations
 * Pr√™t pour les tests mobiles
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });

console.log('üéØ Test final de gemini-2.0-flash pour mobile...\n');

// Fonction de d√©tection MIME type (identique au service)
function detectVideoMimeType(videoBase64) {
  try {
    const firstBytes = Buffer.from(videoBase64.substring(0, 20), 'base64');
    const bytes = new Uint8Array(firstBytes);
    
    // Signatures de fichiers vid√©o
    if (bytes[0] === 0x00 && bytes[1] === 0x00 && bytes[2] === 0x00 && bytes[3] === 0x18) {
      return 'video/mp4'; // MP4
    }
    if (bytes[0] === 0x00 && bytes[1] === 0x00 && bytes[2] === 0x00 && bytes[3] === 0x20) {
      return 'video/mp4'; // MP4 variant
    }
    if (bytes[0] === 0x1A && bytes[1] === 0x45 && bytes[2] === 0xDF && bytes[3] === 0xA3) {
      return 'video/webm'; // WebM
    }
    if (bytes[0] === 0x52 && bytes[1] === 0x49 && bytes[2] === 0x46 && bytes[3] === 0x46) {
      return 'video/avi'; // AVI
    }
    
    return 'video/mp4'; // Fallback s√ªr
    
  } catch (error) {
    return 'video/mp4';
  }
}

// Fonction de validation (identique au service)
function validateGeminiRequest(videoPart, prompt) {
  console.log('üîç Validation finale de la requ√™te...');
  
  if (!videoPart || !videoPart.inlineData) {
    throw new Error('Structure videoPart invalide');
  }
  
  if (!videoPart.inlineData.data || !videoPart.inlineData.mimeType) {
    throw new Error('Donn√©es videoPart incompl√®tes');
  }
  
  const validMimeTypes = ['video/mp4', 'video/webm', 'video/avi', 'video/quicktime'];
  if (!validMimeTypes.includes(videoPart.inlineData.mimeType)) {
    throw new Error(`MIME type non support√©: ${videoPart.inlineData.mimeType}`);
  }
  
  if (!prompt || prompt.length === 0) {
    throw new Error('Prompt vide');
  }
  
  if (prompt.length > 50000) {
    throw new Error(`Prompt trop long: ${prompt.length} caract√®res (max 50000)`);
  }
  
  const totalSize = videoPart.inlineData.data.length + prompt.length;
  const totalSizeMB = totalSize / (1024 * 1024);
  
  if (totalSizeMB > 20) {
    throw new Error(`Requ√™te trop volumineuse: ${totalSizeMB.toFixed(2)}MB (max 20MB)`);
  }
  
  console.log('‚úÖ Validation r√©ussie');
  console.log(`   MIME type: ${videoPart.inlineData.mimeType}`);
  console.log(`   Taille vid√©o: ${(videoPart.inlineData.data.length / 1024).toFixed(0)} KB`);
  console.log(`   Taille prompt: ${prompt.length} caract√®res`);
  console.log(`   Taille totale: ${totalSizeMB.toFixed(2)} MB`);
}

async function testGemini2FlashComplete() {
  try {
    console.log('üöÄ Test complet de gemini-2.0-flash...\n');
    
    // 1. V√©rifier la configuration
    const apiKey = process.env.EXPO_PUBLIC_GOOGLE_GENERATIVE_AI_API_KEY;
    if (!apiKey) {
      console.log('‚ùå Cl√© API Gemini manquante');
      return false;
    }
    
    console.log('‚úÖ Cl√© API Gemini configur√©e');
    console.log(`   Format: ${apiKey.startsWith('AIza') ? 'Valide' : 'Invalide'}`);
    
    // 2. Initialiser Gemini
    const genAI = new GoogleGenerativeAI(apiKey);
    
    // 3. Test simple d'abord
    console.log('\nüîÑ Test simple...');
    
    const model = genAI.getGenerativeModel({ 
      model: 'gemini-2.0-flash',
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 4000,
        topP: 0.8,
        topK: 40
      }
    });
    
    const simpleResult = await model.generateContent('Bonjour ! R√©ponds "Test simple r√©ussi" en fran√ßais.');
    const simpleResponse = await simpleResult.response;
    const simpleText = simpleResponse.text();
    
    console.log('‚úÖ Test simple r√©ussi !');
    console.log('üìù R√©ponse:', simpleText.trim());
    
    // 4. Test avec vid√©o r√©aliste
    console.log('\nüé¨ Test avec vid√©o simul√©e...');
    
    // Cr√©er une vid√©o MP4 factice mais avec structure correcte
    const mp4Header = Buffer.from([
      0x00, 0x00, 0x00, 0x20, // Box size
      0x66, 0x74, 0x79, 0x70, // ftyp
      0x69, 0x73, 0x6F, 0x6D, // isom
      0x00, 0x00, 0x02, 0x00, // minor version
      0x69, 0x73, 0x6F, 0x6D, // compatible brands
      0x69, 0x73, 0x6F, 0x32,
      0x61, 0x76, 0x63, 0x31,
      0x6D, 0x70, 0x34, 0x31
    ]);
    
    // Ajouter du contenu pour simuler une vraie vid√©o
    const videoContent = Buffer.alloc(5000, 0x42); // 5KB de donn√©es
    const fakeVideo = Buffer.concat([mp4Header, videoContent]);
    const videoBase64 = fakeVideo.toString('base64');
    
    // D√©tecter le MIME type
    const detectedMimeType = detectVideoMimeType(videoBase64);
    console.log(`üîç MIME type d√©tect√©: ${detectedMimeType}`);
    
    // Pr√©parer les donn√©es comme dans le vrai service
    const videoPart = {
      inlineData: {
        data: videoBase64,
        mimeType: detectedMimeType
      }
    };
    
    // Prompt r√©aliste mais simplifi√©
    const golfPrompt = `Vous √™tes un instructeur de golf expert analysant un swing de golf complet √† partir d'une vid√©o.

IMPORTANT: R√©pondez UNIQUEMENT en fran√ßais.

PROFIL UTILISATEUR :
- Nom : Test User
- Index de golf : 15
- Main dominante : Droitier

Niveau du joueur : intermediate

Analysez la vid√©o compl√®te du swing et fournissez une √©valuation d√©taill√©e dans ce format JSON EXACT :

{
  "overallScore": 85,
  "confidence": 90,
  "strengths": [
    {
      "strength": "Position stable √† l'adresse",
      "evidence": "Visible dans les premi√®res secondes",
      "impact": "high"
    }
  ],
  "criticalIssues": [
    {
      "issue": "Transfert de poids incomplet",
      "timeEvidence": "√Ä 1.2 secondes dans la vid√©o",
      "immediateAction": "Travailler l'appui sur le pied avant",
      "expectedImprovement": "Plus de puissance et de pr√©cision",
      "priority": 1
    }
  ],
  "actionableAdvice": [
    {
      "category": "Technique",
      "instruction": "Am√©liorer le transfert de poids",
      "howToTest": "Finir en √©quilibre sur le pied avant",
      "timeToSee": "2-3 s√©ances d'entra√Ænement",
      "difficulty": "medium"
    }
  ],
  "immediateActions": {
    "nextSession": ["Travailler le transfert de poids"],
    "thisWeek": ["Exercices d'√©quilibre"],
    "longTerm": ["Am√©liorer la constance"]
  },
  "swingAnalysis": {
    "phases": [
      {
        "name": "Position",
        "startTime": 0.0,
        "endTime": 0.5,
        "quality": 85,
        "observations": ["Bonne posture g√©n√©rale"]
      }
    ],
    "tempo": "L√©g√®rement rapide",
    "timing": "Bon dans l'ensemble"
  }
}`;
    
    // Valider avant envoi
    validateGeminiRequest(videoPart, golfPrompt);
    
    // Envoyer la requ√™te compl√®te
    console.log('\nüì§ Envoi de la requ√™te compl√®te...');
    const videoResult = await model.generateContent([golfPrompt, videoPart]);
    const videoResponse = await videoResult.response;
    const videoText = videoResponse.text();
    
    console.log('‚úÖ Test avec vid√©o r√©ussi !');
    console.log('üìù R√©ponse (extrait):');
    console.log(videoText.substring(0, 300) + '...');
    
    // V√©rifier que c'est du JSON valide
    try {
      const jsonMatch = videoText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        console.log('‚úÖ JSON valide pars√©');
        console.log(`   Score: ${parsed.overallScore || 'N/A'}`);
        console.log(`   Confiance: ${parsed.confidence || 'N/A'}`);
      } else {
        console.log('‚ö†Ô∏è  Pas de JSON trouv√© dans la r√©ponse');
      }
    } catch (parseError) {
      console.log('‚ö†Ô∏è  JSON invalide:', parseError.message);
    }
    
    return true;
    
  } catch (error) {
    console.log('‚ùå Test √©chou√©:', error.message);
    
    if (error.message.includes('400')) {
      console.log('\nüîç Erreur 400 - Causes possibles:');
      console.log('   ‚Ä¢ Donn√©es vid√©o corrompues ou format non support√©');
      console.log('   ‚Ä¢ Prompt trop long ou contient des caract√®res invalides');
      console.log('   ‚Ä¢ Param√®tres de g√©n√©ration incorrects');
      console.log('   ‚Ä¢ Quota API d√©pass√©');
    }
    
    return false;
  }
}

async function runFinalTest() {
  console.log('üéØ Test final pour d√©ploiement mobile...\n');
  
  const success = await testGemini2FlashComplete();
  
  console.log('\nüìä R√©sultat final:');
  console.log(`   Gemini 2.0 Flash: ${success ? '‚úÖ PR√äT' : '‚ùå PROBL√àME'}`);
  
  if (success) {
    console.log('\nüéâ Configuration optimale confirm√©e !');
    console.log('üí° Pr√™t pour les tests mobiles avec:');
    console.log('   ‚Ä¢ Mod√®le: gemini-2.0-flash');
    console.log('   ‚Ä¢ D√©tection MIME automatique');
    console.log('   ‚Ä¢ Validation stricte des donn√©es');
    console.log('   ‚Ä¢ Gestion d\'erreur robuste');
    console.log('\nüöÄ Vous pouvez maintenant tester sur mobile !');
  } else {
    console.log('\n‚ö†Ô∏è  Configuration non fonctionnelle');
    console.log('üîß V√©rifiez:');
    console.log('   1. Cl√© API Google Generative AI');
    console.log('   2. Quotas et limites du compte');
    console.log('   3. Connexion internet');
  }
}

runFinalTest().catch(console.error);
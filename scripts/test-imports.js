#!/usr/bin/env node

/**
 * Test des imports pour v√©rifier que tout fonctionne
 */

console.log('üß™ Test des imports...\n');

try {
  // Test 1: V√©rifier que le fichier index.ts est valide
  console.log('üìã Test 1: V√©rification du fichier index.ts...');
  const fs = require('fs');
  const path = require('path');
  
  const indexFile = path.join(process.cwd(), 'src/lib/analysis/index.ts');
  if (!fs.existsSync(indexFile)) {
    throw new Error('Fichier index.ts manquant');
  }
  
  const indexContent = fs.readFileSync(indexFile, 'utf8');
  console.log('‚úÖ Fichier index.ts trouv√©');
  console.log('   Contenu:', indexContent.split('\n').length, 'lignes');
  
  // Test 2: V√©rifier que mobile-analysis-service.ts existe
  console.log('\nüìã Test 2: V√©rification du fichier mobile-analysis-service.ts...');
  const serviceFile = path.join(process.cwd(), 'src/lib/analysis/mobile-analysis-service.ts');
  if (!fs.existsSync(serviceFile)) {
    throw new Error('Fichier mobile-analysis-service.ts manquant');
  }
  
  const serviceContent = fs.readFileSync(serviceFile, 'utf8');
  console.log('‚úÖ Fichier mobile-analysis-service.ts trouv√©');
  console.log('   Taille:', Math.round(serviceContent.length / 1024), 'KB');
  
  // Test 3: V√©rifier les exports
  console.log('\nüìã Test 3: V√©rification des exports...');
  const exports = [
    'export interface MobileAnalysisRequest',
    'export interface MobileAnalysisResult', 
    'export interface AnalysisProgress',
    'export class MobileAnalysisService',
    'export const mobileAnalysisService'
  ];
  
  exports.forEach(exportStr => {
    const found = serviceContent.includes(exportStr);
    console.log(`   ${exportStr}: ${found ? '‚úÖ' : '‚ùå'}`);
    if (!found) {
      throw new Error(`Export manquant: ${exportStr}`);
    }
  });
  
  // Test 4: V√©rifier les imports dans les fichiers
  console.log('\nüìã Test 4: V√©rification des imports dans les fichiers...');
  const filesToCheck = [
    'src/screens/CameraScreen.tsx',
    'src/screens/AnalysisScreen.tsx', 
    'src/components/analysis/AnalysisProgressModal.tsx',
    'src/screens/AnalysisResultScreen.tsx'
  ];
  
  filesToCheck.forEach(filePath => {
    const fullPath = path.join(process.cwd(), filePath);
    if (fs.existsSync(fullPath)) {
      const content = fs.readFileSync(fullPath, 'utf8');
      const hasCorrectImport = content.includes("from '../lib/analysis'") || content.includes("from '../../lib/analysis'");
      const hasOldImport = content.includes('mobile-analysis-service');
      
      console.log(`   ${filePath}:`);
      console.log(`     Import correct: ${hasCorrectImport ? '‚úÖ' : '‚ùå'}`);
      console.log(`     Import obsol√®te: ${hasOldImport ? '‚ö†Ô∏è' : '‚úÖ'}`);
    } else {
      console.log(`   ${filePath}: ‚ùå Fichier manquant`);
    }
  });
  
  console.log('\n‚úÖ Tous les tests d\'import sont pass√©s !');
  console.log('\nüí° Pour r√©soudre les probl√®mes de cache Metro:');
  console.log('   1. Arr√™ter Metro (Ctrl+C)');
  console.log('   2. Lancer: npx expo start --clear');
  console.log('   3. Ou: rm -rf node_modules/.cache && npx expo start');
  
} catch (error) {
  console.error('‚ùå Test d\'import √©chou√©:', error.message);
  console.log('\nüîß Solutions:');
  console.log('   1. V√©rifier que tous les fichiers sont sauvegard√©s');
  console.log('   2. Red√©marrer l\'√©diteur');
  console.log('   3. Nettoyer le cache Metro: npx expo start --clear');
  process.exit(1);
}
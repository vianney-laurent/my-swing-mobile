#!/usr/bin/env node

/**
 * Script de test pour v√©rifier que l'edge function retourne bien toutes les donn√©es d'analyse
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testEdgeFunctionResponse() {
  console.log('üß™ Test de l\'edge function analyze-video');
  console.log('=' .repeat(50));
  console.log('');

  try {
    // 1. V√©rifier l'authentification
    console.log('üîê V√©rification de l\'authentification...');
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.log('‚ùå Utilisateur non authentifi√©');
      console.log('üí° Connectez-vous d\'abord dans l\'app pour obtenir un token valide');
      return;
    }
    
    console.log('‚úÖ Utilisateur authentifi√©:', user.email);
    console.log('');

    // 2. R√©cup√©rer une analyse r√©cente pour tester le parsing
    console.log('üìä R√©cup√©ration d\'une analyse r√©cente...');
    const { data: analyses, error: analysesError } = await supabase
      .from('analyses')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(1);

    if (analysesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des analyses:', analysesError);
      return;
    }

    if (!analyses || analyses.length === 0) {
      console.log('‚ùå Aucune analyse trouv√©e');
      console.log('üí° Effectuez d\'abord une analyse dans l\'app');
      return;
    }

    const analysis = analyses[0];
    console.log('‚úÖ Analyse trouv√©e:', analysis.id);
    console.log('  - Date:', new Date(analysis.created_at).toLocaleString());
    console.log('  - Club:', analysis.club_used);
    console.log('  - Score global:', analysis.overall_score);
    console.log('');

    // 3. Analyser la r√©ponse Gemini
    console.log('üîç Analyse de la r√©ponse Gemini...');
    
    if (!analysis.gemini_response) {
      console.log('‚ùå Pas de r√©ponse Gemini dans cette analyse');
      console.log('üí° Cette analyse utilise peut-√™tre l\'ancien format');
      return;
    }

    let geminiResponse;
    try {
      geminiResponse = typeof analysis.gemini_response === 'string' 
        ? JSON.parse(analysis.gemini_response)
        : analysis.gemini_response;
    } catch (parseError) {
      console.error('‚ùå Erreur lors du parsing de la r√©ponse Gemini:', parseError);
      console.log('Raw response preview:', 
        typeof analysis.gemini_response === 'string' 
          ? analysis.gemini_response.substring(0, 200) + '...'
          : 'Not a string'
      );
      return;
    }

    console.log('‚úÖ R√©ponse Gemini pars√©e avec succ√®s');
    console.log('');

    // 4. V√©rifier la structure de la r√©ponse
    console.log('üìã Structure de la r√©ponse Gemini:');
    console.log('  - overall_score:', geminiResponse.overall_score || 'MANQUANT');
    console.log('  - key_insights:', geminiResponse.key_insights?.length || 'MANQUANT');
    console.log('  - recommendations:', geminiResponse.recommendations?.length || 'MANQUANT');
    console.log('  - swing_phases:', geminiResponse.swing_phases ? Object.keys(geminiResponse.swing_phases).length : 'MANQUANT');
    console.log('  - technical_analysis:', geminiResponse.technical_analysis ? Object.keys(geminiResponse.technical_analysis).length : 'MANQUANT');
    console.log('');

    // 5. D√©tail des key_insights
    if (geminiResponse.key_insights && geminiResponse.key_insights.length > 0) {
      console.log('üîç D√©tail des key_insights:');
      geminiResponse.key_insights.forEach((insight, index) => {
        console.log(`  ${index + 1}. [${insight.category}] ${insight.title}`);
        console.log(`     S√©v√©rit√©: ${insight.severity}`);
        console.log(`     Timestamp: ${insight.timestamp}s`);
        console.log(`     Description: ${insight.description.substring(0, 100)}...`);
        console.log('');
      });
    } else {
      console.log('‚ùå Aucun key_insights trouv√©');
    }

    // 6. D√©tail des recommendations
    if (geminiResponse.recommendations && geminiResponse.recommendations.length > 0) {
      console.log('üí° D√©tail des recommendations:');
      geminiResponse.recommendations.forEach((rec, index) => {
        console.log(`  ${index + 1}. [${rec.priority}] ${rec.title}`);
        console.log(`     Description: ${rec.description.substring(0, 100)}...`);
        console.log(`     Drill: ${rec.drill_suggestion?.substring(0, 100) || 'Non sp√©cifi√©'}...`);
        console.log('');
      });
    } else {
      console.log('‚ùå Aucune recommendation trouv√©e');
    }

    // 7. D√©tail des swing_phases
    if (geminiResponse.swing_phases) {
      console.log('üèåÔ∏è D√©tail des swing_phases:');
      Object.entries(geminiResponse.swing_phases).forEach(([phase, data]) => {
        console.log(`  - ${phase}: ${data.score}%`);
        console.log(`    Feedback: ${data.feedback.substring(0, 100)}...`);
        console.log('');
      });
    } else {
      console.log('‚ùå Aucune swing_phases trouv√©e');
    }

    // 8. D√©tail de l'analyse technique
    if (geminiResponse.technical_analysis) {
      console.log('üîß Analyse technique:');
      Object.entries(geminiResponse.technical_analysis).forEach(([aspect, analysis]) => {
        console.log(`  - ${aspect}: ${analysis.substring(0, 100)}...`);
      });
      console.log('');
    } else {
      console.log('‚ùå Aucune analyse technique trouv√©e');
    }

    // 9. R√©sum√© de la compl√©tude
    console.log('üìä R√©sum√© de la compl√©tude des donn√©es:');
    const completeness = {
      'Score global': !!geminiResponse.overall_score,
      'Insights cl√©s': !!(geminiResponse.key_insights && geminiResponse.key_insights.length > 0),
      'Recommandations': !!(geminiResponse.recommendations && geminiResponse.recommendations.length > 0),
      'Phases du swing': !!geminiResponse.swing_phases,
      'Analyse technique': !!geminiResponse.technical_analysis
    };

    Object.entries(completeness).forEach(([aspect, present]) => {
      console.log(`  ${present ? '‚úÖ' : '‚ùå'} ${aspect}`);
    });

    const completeCount = Object.values(completeness).filter(Boolean).length;
    const totalCount = Object.keys(completeness).length;
    
    console.log('');
    console.log(`üìà Compl√©tude globale: ${completeCount}/${totalCount} (${Math.round(completeCount/totalCount*100)}%)`);

    if (completeCount === totalCount) {
      console.log('üéâ Toutes les donn√©es sont pr√©sentes !');
    } else {
      console.log('‚ö†Ô∏è Certaines donn√©es manquent dans la r√©ponse Gemini');
      console.log('üí° V√©rifiez le prompt dans l\'edge function');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Fonction principale
async function main() {
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    console.log('Usage: node scripts/test-edge-function-response.js');
    console.log('');
    console.log('Ce script teste la compl√©tude des r√©ponses de l\'edge function analyze-video.');
    console.log('Il v√©rifie qu\'une analyse r√©cente contient bien tous les champs attendus.');
    return;
  }
  
  await testEdgeFunctionResponse();
}

if (require.main === module) {
  main().catch(console.error);
}
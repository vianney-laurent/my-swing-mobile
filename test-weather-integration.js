#!/usr/bin/env node

/**
 * Test de l'int√©gration m√©t√©o mobile
 * V√©rifie que le service m√©t√©o fonctionne correctement
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üå§Ô∏è Test de l\'int√©gration m√©t√©o mobile\n');

// 1. V√©rifier la configuration
console.log('1Ô∏è‚É£ V√©rification de la configuration...');

const envPath = path.join(__dirname, '.env');
if (!fs.existsSync(envPath)) {
  console.error('‚ùå Fichier .env manquant');
  process.exit(1);
}

const envContent = fs.readFileSync(envPath, 'utf8');
const hasWeatherKey = envContent.includes('EXPO_PUBLIC_OPENWEATHER_API_KEY=');

if (hasWeatherKey) {
  console.log('‚úÖ Cl√© API OpenWeatherMap configur√©e');
} else {
  console.log('‚ö†Ô∏è Cl√© API OpenWeatherMap manquante (fallback sera utilis√©)');
}

// 2. V√©rifier les fichiers m√©t√©o
console.log('\n2Ô∏è‚É£ V√©rification des fichiers m√©t√©o...');

const weatherFiles = [
  'src/lib/weather/mobile-weather-service.ts',
  'src/components/WeatherCard.tsx'
];

let allFilesExist = true;
weatherFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} manquant`);
    allFilesExist = false;
  }
});

if (!allFilesExist) {
  console.error('\n‚ùå Fichiers m√©t√©o manquants');
  process.exit(1);
}

// 3. V√©rifier l'int√©gration dans HomeScreen
console.log('\n3Ô∏è‚É£ V√©rification de l\'int√©gration HomeScreen...');

const homeScreenPath = path.join(__dirname, 'src/screens/HomeScreen.tsx');
if (fs.existsSync(homeScreenPath)) {
  const homeScreenContent = fs.readFileSync(homeScreenPath, 'utf8');
  
  const checks = [
    { name: 'Import WeatherCard', pattern: /import.*WeatherCard.*from/ },
    { name: 'Import MobileWeatherService', pattern: /import.*MobileWeatherService.*from/ },
    { name: 'WeatherCard usage', pattern: /<WeatherCard/ },
    { name: 'Greeting generation', pattern: /generatePersonalizedGreeting/ },
    { name: 'Profile city check', pattern: /profile\?\.city/ }
  ];
  
  checks.forEach(check => {
    if (check.pattern.test(homeScreenContent)) {
      console.log(`‚úÖ ${check.name}`);
    } else {
      console.log(`‚ùå ${check.name} manquant`);
    }
  });
} else {
  console.log('‚ùå HomeScreen.tsx manquant');
}

// 4. V√©rifier la compilation TypeScript
console.log('\n4Ô∏è‚É£ V√©rification de la compilation TypeScript...');

try {
  execSync('npx tsc --noEmit --skipLibCheck', { 
    stdio: 'pipe',
    cwd: __dirname 
  });
  console.log('‚úÖ Compilation TypeScript r√©ussie');
} catch (error) {
  console.log('‚ö†Ô∏è Erreurs de compilation TypeScript d√©tect√©es');
  console.log('D√©tails:', error.stdout?.toString() || error.message);
}

// 5. R√©sum√© de l'int√©gration m√©t√©o
console.log('\nüìã R√©sum√© de l\'int√©gration m√©t√©o:');
console.log('');
console.log('üå§Ô∏è Service M√©t√©o:');
console.log('   ‚Ä¢ API OpenWeatherMap avec fallback intelligent');
console.log('   ‚Ä¢ Greetings personnalis√©s selon m√©t√©o');
console.log('   ‚Ä¢ Conseils golf contextuels');
console.log('');
console.log('üì± Interface WeatherCard:');
console.log('   ‚Ä¢ Design moderne avec gradients color√©s');
console.log('   ‚Ä¢ Ic√¥nes m√©t√©o dynamiques');
console.log('   ‚Ä¢ D√©tails vent et humidit√©');
console.log('   ‚Ä¢ Bouton refresh manuel');
console.log('');
console.log('üè† Int√©gration HomeScreen:');
console.log('   ‚Ä¢ Greeting avec m√©t√©o dans le titre');
console.log('   ‚Ä¢ WeatherCard si ville renseign√©e dans profil');
console.log('   ‚Ä¢ Chargement automatique des donn√©es m√©t√©o');
console.log('');
console.log('‚öôÔ∏è Configuration:');
console.log('   ‚Ä¢ Cl√© API dans EXPO_PUBLIC_OPENWEATHER_API_KEY');
console.log('   ‚Ä¢ Fallback si API indisponible');
console.log('   ‚Ä¢ Ville r√©cup√©r√©e depuis profil utilisateur');

console.log('\nüéØ Test de l\'int√©gration:');
console.log('1. D√©marrer l\'app: npm start');
console.log('2. Se connecter avec un compte ayant une ville dans le profil');
console.log('3. Observer le greeting personnalis√© avec m√©t√©o');
console.log('4. V√©rifier l\'affichage de la WeatherCard');
console.log('5. Tester le bouton refresh de la m√©t√©o');

console.log('\n‚úÖ Int√©gration m√©t√©o pr√™te pour les tests !');
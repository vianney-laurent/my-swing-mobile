#!/usr/bin/env node

/**
 * Test du fix de d√©connexion
 */

const fs = require('fs');
const path = require('path');

console.log('üîê Test du fix de d√©connexion\n');

const filesToCheck = [
  {
    file: 'src/navigation/AppNavigator.tsx',
    name: 'AppNavigator',
    checks: [
      { 
        pattern: /onAuthStateChange/, 
        desc: 'Listener pour changements d\'auth'
      },
      { 
        pattern: /SIGNED_OUT.*navigate\('auth'\)/, 
        desc: 'Redirection vers auth lors de d√©connexion'
      },
      { 
        pattern: /SIGNED_IN.*navigate\('home'\)/, 
        desc: 'Redirection vers home lors de connexion'
      },
      { 
        pattern: /subscription\.unsubscribe/, 
        desc: 'Nettoyage du listener'
      }
    ]
  },
  {
    file: 'src/screens/ProfileScreen.tsx',
    name: 'ProfileScreen',
    checks: [
      { 
        pattern: /console\.log.*Signing out/, 
        desc: 'Log de d√©connexion'
      },
      { 
        pattern: /const { error } = await supabase\.auth\.signOut/, 
        desc: 'Gestion d\'erreur de d√©connexion'
      },
      { 
        pattern: /User signed out successfully/, 
        desc: 'Log de succ√®s'
      },
      { 
        pattern: /Alert\.alert.*Erreur.*d√©connexion/, 
        desc: 'Gestion d\'erreur avec alert'
      }
    ]
  }
];

let allGood = true;

filesToCheck.forEach(({ file, name, checks }) => {
  const filePath = path.join(__dirname, file);
  
  console.log(`üì± ${name}:`);
  
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    checks.forEach(({ pattern, desc }) => {
      const found = pattern.test(content);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${desc}`);
      if (!found) allGood = false;
    });
  } else {
    console.log(`   ‚ùå Fichier non trouv√©`);
    allGood = false;
  }
  console.log('');
});

console.log('üîê Syst√®me de d√©connexion am√©lior√©:');
console.log('');
console.log('üì± DANS APPNAVIGATOR:');
console.log('‚Ä¢ Listener onAuthStateChange ajout√©');
console.log('‚Ä¢ D√©tection automatique des changements d\'auth');
console.log('‚Ä¢ Redirection automatique vers auth lors de SIGNED_OUT');
console.log('‚Ä¢ Redirection automatique vers home lors de SIGNED_IN');
console.log('‚Ä¢ Nettoyage du listener au d√©montage');
console.log('');
console.log('üì± DANS PROFILESCREEN:');
console.log('‚Ä¢ Gestion d\'erreur am√©lior√©e');
console.log('‚Ä¢ Logs de debug pour diagnostiquer');
console.log('‚Ä¢ Feedback utilisateur en cas d\'erreur');
console.log('‚Ä¢ Pas de navigation manuelle (g√©r√©e par le listener)');

console.log('\nüîÑ Flux de d√©connexion:');
console.log('');
console.log('1Ô∏è‚É£ Utilisateur clique sur "Se d√©connecter"');
console.log('2Ô∏è‚É£ Confirmation avec Alert.alert');
console.log('3Ô∏è‚É£ ProfileScreen appelle supabase.auth.signOut()');
console.log('4Ô∏è‚É£ Supabase √©met un √©v√©nement SIGNED_OUT');
console.log('5Ô∏è‚É£ AppNavigator d√©tecte le changement via onAuthStateChange');
console.log('6Ô∏è‚É£ AppNavigator met √† jour user = null');
console.log('7Ô∏è‚É£ AppNavigator navigue automatiquement vers AuthScreen');
console.log('8Ô∏è‚É£ L\'utilisateur voit l\'√©cran de connexion');

if (allGood) {
  console.log('\n‚úÖ Syst√®me de d√©connexion complet et fonctionnel !');
  console.log('üîê La d√©connexion devrait maintenant rediriger vers l\'√©cran d\'auth');
} else {
  console.log('\n‚ö†Ô∏è Certains √©l√©ments du syst√®me de d√©connexion ne sont pas complets');
}

console.log('\nüß™ Test de validation:');
console.log('1. Recharge l\'app dans Expo Go');
console.log('2. Assure-toi d\'√™tre connect√©');
console.log('3. Va sur l\'onglet "Profil"');
console.log('4. Clique sur "Se d√©connecter"');
console.log('5. Confirme la d√©connexion');
console.log('6. V√©rifie que l\'app redirige vers l\'√©cran de connexion');
console.log('7. V√©rifie les logs dans la console:');
console.log('   - "üîê Signing out user..."');
console.log('   - "‚úÖ User signed out successfully"');
console.log('   - "üîê Auth state changed: SIGNED_OUT"');

console.log('\nüéâ Test termin√© !');
#!/usr/bin/env node

/**
 * Test complet du flux de contexte (club + angle)
 */

const fs = require('fs');
const path = require('path');

console.log('üîÑ Test complet du flux de contexte\n');

const filesToCheck = [
  {
    file: 'src/components/analysis/SwingContextForm.tsx',
    name: 'SwingContextForm',
    checks: [
      { pattern: /onContextSelected.*club.*angle/, desc: 'Callback avec club et angle' },
      { pattern: /clubCategories.*=/, desc: 'Nouvelle liste de clubs' },
      { pattern: /fer4.*fer5.*fer6.*fer7.*fer8.*fer9/s, desc: 'Tous les fers pr√©sents' }
    ]
  },
  {
    file: 'src/screens/AnalysisScreen.tsx',
    name: 'AnalysisScreen',
    checks: [
      { pattern: /handleContextSelected.*context/, desc: 'R√©ception du contexte' },
      { pattern: /Analysis context.*context/, desc: 'Log du contexte' },
      { pattern: /context.*videoUri.*userLevel/s, desc: 'Transmission au service' }
    ]
  },
  {
    file: 'src/lib/analysis/mobile-analysis-service.ts',
    name: 'MobileAnalysisService',
    checks: [
      { pattern: /club_used: request\.context\?\.club/, desc: 'Sauvegarde club_used' },
      { pattern: /camera_angle: request\.context\?\.angle/, desc: 'Sauvegarde camera_angle' },
      { pattern: /Saving analysis with context/, desc: 'Log de sauvegarde' }
    ]
  }
];

let allGood = true;

filesToCheck.forEach(({ file, name, checks }) => {
  const filePath = path.join(__dirname, file);
  
  console.log(`üì± ${name}:`);
  
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    checks.forEach(({ pattern, desc }) => {
      const found = pattern.test(content);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${desc}`);
      if (!found) allGood = false;
    });
  } else {
    console.log(`   ‚ùå Fichier non trouv√©`);
    allGood = false;
  }
  console.log('');
});

console.log('üîÑ Flux de donn√©es du contexte:');
console.log('');
console.log('1Ô∏è‚É£ SwingContextForm:');
console.log('   ‚Ä¢ Utilisateur s√©lectionne angle (face/profile)');
console.log('   ‚Ä¢ Utilisateur s√©lectionne club (driver, fer7, etc.)');
console.log('   ‚Ä¢ onContextSelected({ club, angle })');
console.log('');
console.log('2Ô∏è‚É£ AnalysisScreen:');
console.log('   ‚Ä¢ handleContextSelected re√ßoit le contexte');
console.log('   ‚Ä¢ startAnalysis(context) avec log');
console.log('   ‚Ä¢ mobileAnalysisService.analyzeGolfSwing({ context })');
console.log('');
console.log('3Ô∏è‚É£ MobileAnalysisService:');
console.log('   ‚Ä¢ Re√ßoit request.context');
console.log('   ‚Ä¢ Log "Saving analysis with context"');
console.log('   ‚Ä¢ Sauvegarde club_used et camera_angle');
console.log('');
console.log('4Ô∏è‚É£ Base de donn√©es:');
console.log('   ‚Ä¢ club_used: "driver", "fer7", etc.');
console.log('   ‚Ä¢ camera_angle: "face" ou "profile"');
console.log('   ‚Ä¢ swing_data: contexte complet en JSON');

console.log('\nüéØ Nouveaux clubs disponibles:');
console.log('');
console.log('üèåÔ∏è BOIS: Driver, Bois de parcours');
console.log('üîÄ HYBRIDE: Hybride');
console.log('üî¢ FERS: Fer 4, 5, 6, 7, 8, 9');
console.log('üìê WEDGES: Pitch, SW');

if (allGood) {
  console.log('\n‚úÖ Flux de contexte complet et fonctionnel !');
  console.log('üé¨ Les prochaines analyses devraient avoir club_used et camera_angle remplis');
} else {
  console.log('\n‚ö†Ô∏è Certains √©l√©ments du flux ne sont pas complets');
}

console.log('\nüß™ Test de validation:');
console.log('1. Recharge l\'app dans Expo Go');
console.log('2. Analyse ‚Üí Choisir une vid√©o');
console.log('3. S√©lectionne angle ET club');
console.log('4. V√©rifie les logs dans la console:');
console.log('   - "Analysis context: { club: ..., angle: ... }"');
console.log('   - "Saving analysis with context: { club: ..., angle: ... }"');
console.log('5. V√©rifie dans Supabase que les colonnes sont remplies');

console.log('\nüéâ Test termin√© !');
/**
 * Service pour g√©rer les conseils du jour g√©n√©r√©s par IA
 */

import { supabase } from '../supabase/client';
import { GoogleGenerativeAI } from '@google/generative-ai';

export interface DailyTip {
  id: string;
  date: string;
  title: string;
  content: string;
  category: 'technique' | 'mental' | 'equipement' | 'entrainement';
  icon: string;
  color: string;
  difficulty_level: 'beginner' | 'intermediate' | 'advanced';
  generated_by: string;
  metadata?: any;
  created_at: string;
}

export interface GeneratedTipData {
  title: string;
  content: string;
  category: 'technique' | 'mental' | 'equipement' | 'entrainement';
  icon: string;
  color: string;
  difficulty_level: 'beginner' | 'intermediate' | 'advanced';
}

export class DailyTipsService {
  private genAI: GoogleGenerativeAI | null = null;

  private initializeGenAI() {
    if (!this.genAI) {
      const apiKey = process.env.EXPO_PUBLIC_GOOGLE_GENERATIVE_AI_API_KEY;
      if (!apiKey) {
        throw new Error('GOOGLE_GENERATIVE_AI_API_KEY not configured');
      }
      this.genAI = new GoogleGenerativeAI(apiKey);
    }
    return this.genAI;
  }

  /**
   * R√©cup√®re le conseil du jour actuel
   */
  async getTodaysTip(): Promise<DailyTip | null> {
    try {
      console.log('üìÖ Fetching today\'s tip...');
      
      const today = new Date().toISOString().split('T')[0]; // Format YYYY-MM-DD
      
      const { data, error } = await supabase
        .from('daily_tips')
        .select('*')
        .eq('date', today)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          // Aucun conseil pour aujourd'hui, on peut en g√©n√©rer un
          console.log('üìÖ No tip found for today, might need to generate one');
          return null;
        }
        throw error;
      }

      console.log('‚úÖ Today\'s tip loaded successfully');
      return data as DailyTip;
      
    } catch (error) {
      console.error('‚ùå Error fetching today\'s tip:', error);
      throw error;
    }
  }

  /**
   * R√©cup√®re les conseils r√©cents (pour fallback)
   */
  async getRecentTips(limit: number = 7): Promise<DailyTip[]> {
    try {
      console.log(`üìÖ Fetching ${limit} recent tips...`);
      
      const { data, error } = await supabase
        .from('daily_tips')
        .select('*')
        .order('date', { ascending: false })
        .limit(limit);

      if (error) throw error;

      console.log(`‚úÖ Loaded ${data?.length || 0} recent tips`);
      return data as DailyTip[] || [];
      
    } catch (error) {
      console.error('‚ùå Error fetching recent tips:', error);
      throw error;
    }
  }

  /**
   * G√©n√®re un nouveau conseil avec Gemini
   */
  async generateTipWithGemini(): Promise<GeneratedTipData> {
    try {
      console.log('ü§ñ Generating new tip with Gemini...');
      
      const genAI = this.initializeGenAI();
      const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });

      const prompt = this.buildTipGenerationPrompt();
      
      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      console.log('‚úÖ Gemini response received');
      
      const tipData = this.parseTipResponse(text);
      
      console.log('‚úÖ Tip generated successfully:', tipData.title);
      return tipData;
      
    } catch (error) {
      console.error('‚ùå Error generating tip with Gemini:', error);
      throw error;
    }
  }

  /**
   * Construit le prompt pour g√©n√©rer un conseil
   */
  private buildTipGenerationPrompt(): string {
    const today = new Date();
    const dayOfWeek = today.toLocaleDateString('fr-FR', { weekday: 'long' });
    const season = this.getCurrentSeason();
    
    return `Tu es un coach de golf professionnel exp√©riment√©. G√©n√®re un conseil du jour unique et pratique pour les golfeurs.

CONTEXTE:
- Jour: ${dayOfWeek}
- Saison: ${season}
- Public: Golfeurs de tous niveaux (d√©butants √† avanc√©s)
- Format: Application mobile de coaching golf

INSTRUCTIONS:
1. Cr√©e un conseil UNIQUE qui n'est pas g√©n√©rique
2. Le conseil doit √™tre actionnable et pratique
3. Adapte le conseil au contexte (jour de la semaine, saison)
4. Varie les cat√©gories: technique, mental, √©quipement, entra√Ænement
5. Utilise un ton encourageant et professionnel

R√âPONSE REQUISE (format JSON strict):
{
  "title": "<titre accrocheur en 3-6 mots>",
  "content": "<conseil d√©taill√© en 2-3 phrases maximum, tr√®s pratique>",
  "category": "<technique|mental|equipement|entrainement>",
  "icon": "<nom d'ic√¥ne Ionicons appropri√©e>",
  "color": "<couleur hex selon cat√©gorie: #3b82f6 technique, #8b5cf6 mental, #f59e0b √©quipement, #10b981 entra√Ænement>",
  "difficulty_level": "<beginner|intermediate|advanced>"
}

EXEMPLES DE CONSEILS SELON LE CONTEXTE:
- Lundi: Pr√©paration mentale pour la semaine
- Mercredi: Technique de swing ou posture
- Vendredi: Conseils pour le weekend au golf
- Hiver: Exercices en int√©rieur, √©quipement froid
- √ât√©: Hydratation, protection solaire, conditions chaudes

G√©n√®re maintenant un conseil unique et pertinent:`;
  }

  /**
   * Parse la r√©ponse de Gemini
   */
  private parseTipResponse(text: string): GeneratedTipData {
    try {
      // Extraire le JSON de la r√©ponse
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in Gemini response');
      }
      
      const parsed = JSON.parse(jsonMatch[0]);
      
      // Valider la structure
      const required = ['title', 'content', 'category', 'icon', 'color', 'difficulty_level'];
      const missing = required.filter(field => !parsed.hasOwnProperty(field));
      
      if (missing.length > 0) {
        throw new Error(`Missing required fields: ${missing.join(', ')}`);
      }

      // Valider les valeurs
      const validCategories = ['technique', 'mental', 'equipement', 'entrainement'];
      const validLevels = ['beginner', 'intermediate', 'advanced'];
      
      if (!validCategories.includes(parsed.category)) {
        parsed.category = 'technique'; // Fallback
      }
      
      if (!validLevels.includes(parsed.difficulty_level)) {
        parsed.difficulty_level = 'beginner'; // Fallback
      }

      // Valider la couleur (format hex)
      if (!parsed.color.match(/^#[0-9A-Fa-f]{6}$/)) {
        parsed.color = '#3b82f6'; // Fallback
      }
      
      console.log('‚úÖ Tip parsed successfully');
      return parsed as GeneratedTipData;
      
    } catch (error) {
      console.error('‚ùå Failed to parse tip response:', error);
      console.log('Raw response:', text);
      
      // Fallback tip en cas d'erreur de parsing
      return {
        title: 'Conseil du jour',
        content: 'Concentrez-vous sur votre posture et gardez les yeux sur la balle pendant tout le swing.',
        category: 'technique',
        icon: 'golf',
        color: '#3b82f6',
        difficulty_level: 'beginner'
      };
    }
  }

  /**
   * D√©termine la saison actuelle
   */
  private getCurrentSeason(): string {
    const month = new Date().getMonth() + 1; // 1-12
    
    if (month >= 3 && month <= 5) return 'Printemps';
    if (month >= 6 && month <= 8) return '√ât√©';
    if (month >= 9 && month <= 11) return 'Automne';
    return 'Hiver';
  }

  /**
   * Sauvegarde un conseil g√©n√©r√© en base
   * (Utilis√© par l'Edge Function)
   */
  async saveTip(tipData: GeneratedTipData, date?: string): Promise<DailyTip> {
    try {
      const tipDate = date || new Date().toISOString().split('T')[0];
      
      console.log('üíæ Saving tip to database...');
      
      const { data, error } = await supabase
        .from('daily_tips')
        .insert({
          date: tipDate,
          title: tipData.title,
          content: tipData.content,
          category: tipData.category,
          icon: tipData.icon,
          color: tipData.color,
          difficulty_level: tipData.difficulty_level,
          generated_by: 'gemini',
          metadata: {
            generated_at: new Date().toISOString(),
            prompt_version: '1.0'
          }
        })
        .select()
        .single();

      if (error) throw error;

      console.log('‚úÖ Tip saved successfully');
      return data as DailyTip;
      
    } catch (error) {
      console.error('‚ùå Error saving tip:', error);
      throw error;
    }
  }

  /**
   * G√©n√®re et sauvegarde le conseil du jour si n√©cessaire
   */
  async ensureTodaysTip(): Promise<DailyTip> {
    try {
      // V√©rifier si on a d√©j√† un conseil pour aujourd'hui
      const existingTip = await this.getTodaysTip();
      
      if (existingTip) {
        console.log('‚úÖ Today\'s tip already exists');
        return existingTip;
      }

      console.log('üìù No tip for today, trying Edge Function first...');
      
      // Essayer d'appeler l'Edge Function d'abord
      try {
        await this.callEdgeFunction();
        
        // R√©cup√©rer le conseil g√©n√©r√© par l'Edge Function
        const newTip = await this.getTodaysTip();
        if (newTip) {
          console.log('‚úÖ Tip generated by Edge Function');
          return newTip;
        }
      } catch (edgeError) {
        console.warn('‚ö†Ô∏è Edge Function failed, falling back to local generation:', edgeError);
      }
      
      // Fallback: g√©n√©rer localement
      console.log('üìù Generating tip locally...');
      const tipData = await this.generateTipWithGemini();
      
      // Sauvegarder en base
      const savedTip = await this.saveTip(tipData);
      
      console.log('‚úÖ Today\'s tip generated and saved locally');
      return savedTip;
      
    } catch (error) {
      console.error('‚ùå Error ensuring today\'s tip:', error);
      
      // Fallback final: retourner un conseil r√©cent
      const recentTips = await this.getRecentTips(1);
      if (recentTips.length > 0) {
        console.log('‚ö†Ô∏è Using recent tip as final fallback');
        return recentTips[0];
      }
      
      // Fallback ultime: conseil statique
      return this.getFallbackTip();
    }
  }

  /**
   * Appelle l'Edge Function pour g√©n√©rer le conseil du jour
   */
  private async callEdgeFunction(): Promise<void> {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        throw new Error('No active session for Edge Function call');
      }

      console.log('üìû Calling Edge Function...');
      
      const { data, error } = await supabase.functions.invoke('generate-daily-tip', {
        headers: {
          Authorization: `Bearer ${session.access_token}`,
        },
      });

      if (error) {
        throw error;
      }

      console.log('‚úÖ Edge Function called successfully:', data);
      
    } catch (error) {
      console.error('‚ùå Edge Function call failed:', error);
      throw error;
    }
  }

  /**
   * Conseil de fallback en cas d'√©chec total
   */
  private getFallbackTip(): DailyTip {
    const today = new Date().toISOString().split('T')[0];
    
    return {
      id: 'fallback-tip',
      date: today,
      title: 'Conseil du jour',
      content: 'Concentrez-vous sur votre posture et gardez les yeux sur la balle pendant tout le swing. La r√©gularit√© vient avec la pratique !',
      category: 'technique',
      icon: 'golf',
      color: '#3b82f6',
      difficulty_level: 'beginner',
      generated_by: 'fallback',
      created_at: new Date().toISOString()
    };
  }

  /**
   * Teste la connectivit√© avec Supabase
   */
  async testConnection(): Promise<boolean> {
    try {
      console.log('üîç Testing Supabase connection...');
      
      const { data, error } = await supabase
        .from('daily_tips')
        .select('count')
        .limit(1);

      if (error) {
        console.error('‚ùå Supabase connection test failed:', error);
        return false;
      }

      console.log('‚úÖ Supabase connection test successful');
      return true;
      
    } catch (error) {
      console.error('‚ùå Supabase connection test error:', error);
      return false;
    }
  }

  /**
   * R√©cup√®re les statistiques des conseils
   */
  async getTipsStats(): Promise<{
    totalTips: number;
    categoriesCount: Record<string, number>;
    recentTipsCount: number;
  }> {
    try {
      console.log('üìä Fetching tips statistics...');
      
      // Compter le total
      const { count: totalTips } = await supabase
        .from('daily_tips')
        .select('*', { count: 'exact', head: true });

      // Compter par cat√©gorie
      const { data: categoryData } = await supabase
        .from('daily_tips')
        .select('category');

      const categoriesCount = (categoryData || []).reduce((acc, tip) => {
        acc[tip.category] = (acc[tip.category] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);

      // Compter les conseils r√©cents (7 derniers jours)
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
      
      const { count: recentTipsCount } = await supabase
        .from('daily_tips')
        .select('*', { count: 'exact', head: true })
        .gte('date', sevenDaysAgo.toISOString().split('T')[0]);

      console.log('‚úÖ Tips statistics loaded');
      
      return {
        totalTips: totalTips || 0,
        categoriesCount,
        recentTipsCount: recentTipsCount || 0
      };
      
    } catch (error) {
      console.error('‚ùå Error fetching tips statistics:', error);
      return {
        totalTips: 0,
        categoriesCount: {},
        recentTipsCount: 0
      };
    }
  }
}

export const dailyTipsService = new DailyTipsService();
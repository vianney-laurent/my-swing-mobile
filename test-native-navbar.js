#!/usr/bin/env node

/**
 * Test de la navbar native mobile
 * V√©rifie que tous les composants de navigation fonctionnent
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üé® Test de la navbar native mobile\n');

// 1. V√©rifier les d√©pendances
console.log('1Ô∏è‚É£ V√©rification des d√©pendances...');

const packageJsonPath = path.join(__dirname, 'package.json');
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  const requiredDeps = [
    'expo-blur',
    'react-native-reanimated',
    '@expo/vector-icons',
    'react-native-safe-area-context'
  ];
  
  requiredDeps.forEach(dep => {
    if (dependencies[dep]) {
      console.log(`‚úÖ ${dep}: ${dependencies[dep]}`);
    } else {
      console.log(`‚ùå ${dep} manquant`);
    }
  });
} else {
  console.log('‚ùå package.json manquant');
}

// 2. V√©rifier les fichiers de navigation
console.log('\n2Ô∏è‚É£ V√©rification des fichiers de navigation...');

const navFiles = [
  'src/components/navigation/NativeTabBar.tsx',
  'src/hooks/useNavigation.ts',
  'src/screens/AuthScreen.tsx',
  'src/navigation/AppNavigator.tsx'
];

let allNavFilesExist = true;
navFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} manquant`);
    allNavFilesExist = false;
  }
});

if (!allNavFilesExist) {
  console.error('\n‚ùå Fichiers de navigation manquants');
  process.exit(1);
}

// 3. V√©rifier l'int√©gration dans AppNavigator
console.log('\n3Ô∏è‚É£ V√©rification de l\'int√©gration AppNavigator...');

const appNavPath = path.join(__dirname, 'src/navigation/AppNavigator.tsx');
if (fs.existsSync(appNavPath)) {
  const appNavContent = fs.readFileSync(appNavPath, 'utf8');
  
  const checks = [
    { name: 'Import NativeTabBar', pattern: /import.*NativeTabBar.*from/ },
    { name: 'Import useNavigation', pattern: /import.*useNavigation.*from/ },
    { name: 'Import AuthScreen', pattern: /import.*AuthScreen.*from/ },
    { name: 'NativeTabBar usage', pattern: /<NativeTabBar/ },
    { name: 'Hook usage', pattern: /useNavigation\(\)/ },
    { name: 'AuthScreen usage', pattern: /<AuthScreen/ }
  ];
  
  checks.forEach(check => {
    if (check.pattern.test(appNavContent)) {
      console.log(`‚úÖ ${check.name}`);
    } else {
      console.log(`‚ùå ${check.name} manquant`);
    }
  });
} else {
  console.log('‚ùå AppNavigator.tsx manquant');
}

// 4. V√©rifier la structure des ic√¥nes
console.log('\n4Ô∏è‚É£ V√©rification des ic√¥nes...');

const tabBarPath = path.join(__dirname, 'src/components/navigation/NativeTabBar.tsx');
if (fs.existsSync(tabBarPath)) {
  const tabBarContent = fs.readFileSync(tabBarPath, 'utf8');
  
  const iconChecks = [
    { name: 'Home icons', pattern: /home-outline.*home/ },
    { name: 'Camera icons', pattern: /camera-outline.*camera/ },
    { name: 'History icons', pattern: /bar-chart-outline.*bar-chart/ },
    { name: 'Profile icons', pattern: /person-outline.*person/ },
    { name: 'Ionicons import', pattern: /import.*Ionicons.*from/ }
  ];
  
  iconChecks.forEach(check => {
    if (check.pattern.test(tabBarContent)) {
      console.log(`‚úÖ ${check.name}`);
    } else {
      console.log(`‚ö†Ô∏è ${check.name} √† v√©rifier`);
    }
  });
} else {
  console.log('‚ùå NativeTabBar.tsx manquant');
}

// 5. V√©rifier la compilation TypeScript
console.log('\n5Ô∏è‚É£ V√©rification de la compilation TypeScript...');

try {
  execSync('npx tsc --noEmit --skipLibCheck', { 
    stdio: 'pipe',
    cwd: __dirname 
  });
  console.log('‚úÖ Compilation TypeScript r√©ussie');
} catch (error) {
  console.log('‚ö†Ô∏è Erreurs de compilation TypeScript d√©tect√©es');
  console.log('D√©tails:', error.stdout?.toString() || error.message);
}

// 6. R√©sum√© de la navbar native
console.log('\nüìã R√©sum√© de la navbar native:');
console.log('');
console.log('üé® Design Sp√©cifique par Plateforme:');
console.log('   ‚Ä¢ iOS: Liquid Glass Effect avec BlurView');
console.log('   ‚Ä¢ Android: Material Design avec Elevation');
console.log('   ‚Ä¢ Animations: react-native-reanimated');
console.log('');
console.log('üì± Fonctionnalit√©s:');
console.log('   ‚Ä¢ Ic√¥nes natives Ionicons (outline/filled)');
console.log('   ‚Ä¢ Indicateur anim√© qui suit l\'onglet actif');
console.log('   ‚Ä¢ Feedback tactile optimis√© mobile');
console.log('   ‚Ä¢ Safe area iOS (34px bottom)');
console.log('');
console.log('üîß Architecture:');
console.log('   ‚Ä¢ NativeTabBar: Composant navbar cross-platform');
console.log('   ‚Ä¢ useNavigation: Hook de gestion d\'√©tat');
console.log('   ‚Ä¢ AuthScreen: √âcran d\'authentification moderne');
console.log('   ‚Ä¢ Type Safety: Types TypeScript stricts');
console.log('');
console.log('üéØ Optimisations Mobile:');
console.log('   ‚Ä¢ Touch targets 44px minimum');
console.log('   ‚Ä¢ Animations sur thread UI natif');
console.log('   ‚Ä¢ Lazy loading des composants');
console.log('   ‚Ä¢ Memoization pour √©viter re-renders');

console.log('\nüéØ Test de la navbar:');
console.log('1. D√©marrer l\'app: npm start');
console.log('2. Observer l\'effet blur sur iOS / elevation sur Android');
console.log('3. Tester les transitions entre onglets');
console.log('4. V√©rifier l\'animation de l\'indicateur');
console.log('5. Valider l\'√©cran d\'authentification moderne');

console.log('\n‚úÖ Navbar native pr√™te pour les tests !');
console.log('\nüé® Effets visuels:');
console.log('‚Ä¢ iOS: Transparence + flou + coins arrondis');
console.log('‚Ä¢ Android: Ombre + ripple effect + barre indicatrice');
console.log('‚Ä¢ Cross-platform: Ic√¥nes coh√©rentes + animations fluides');
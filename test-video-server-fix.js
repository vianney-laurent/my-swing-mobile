#!/usr/bin/env node

/**
 * Test du fix serveur vid√©o mobile
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Test du fix serveur vid√©o mobile\n');

// 1. V√©rifier le fix dans mobile-analysis-service
console.log('1Ô∏è‚É£ V√©rification du fix serveur vid√©o...');

const serviceFile = path.join(__dirname, 'src/lib/analysis/mobile-analysis-service.ts');
if (fs.existsSync(serviceFile)) {
  const content = fs.readFileSync(serviceFile, 'utf8');
  
  const checks = [
    { 
      name: 'FormData avec blob', 
      pattern: /formData\.append\('video',\s*blob,/, 
      expected: true,
      description: 'Utilise blob au lieu d\'objet URI'
    },
    { 
      name: 'Pas de Content-Type manuel', 
      pattern: /headers:\s*{\s*'Content-Type':\s*'multipart\/form-data'/, 
      expected: false,
      description: 'Laisse le navigateur g√©rer Content-Type'
    },
    { 
      name: 'Fallback automatique', 
      pattern: /falling back to local processing/, 
      expected: true,
      description: 'Fallback vers traitement local'
    },
    { 
      name: 'Gestion d\'erreur serveur', 
      pattern: /const errorText = await serverResponse\.text\(\)/, 
      expected: true,
      description: 'Log des erreurs serveur d√©taill√©es'
    }
  ];
  
  checks.forEach(check => {
    const found = check.pattern.test(content);
    if (found === check.expected) {
      console.log(`‚úÖ ${check.name}: ${check.description}`);
    } else {
      console.log(`‚ùå ${check.name}: ${check.description}`);
    }
  });
} else {
  console.log('‚ùå mobile-analysis-service.ts manquant');
}

// 2. V√©rifier la configuration du serveur
console.log('\n2Ô∏è‚É£ V√©rification configuration serveur...');

const envFile = path.join(__dirname, '.env');
if (fs.existsSync(envFile)) {
  const envContent = fs.readFileSync(envFile, 'utf8');
  
  if (envContent.includes('EXPO_PUBLIC_FRAME_EXTRACTION_SERVER_URL')) {
    console.log('‚úÖ Variable serveur configur√©e');
    
    const match = envContent.match(/EXPO_PUBLIC_FRAME_EXTRACTION_SERVER_URL=(.+)/);
    if (match) {
      console.log(`   URL: ${match[1].trim()}`);
    }
  } else {
    console.log('‚ùå Variable serveur manquante');
  }
} else {
  console.log('‚ùå Fichier .env manquant');
}

console.log('\nüîß Fixes appliqu√©s:');
console.log('');
console.log('AVANT (erreur 400):');
console.log('formData.append(\'video\', { uri, type, name })  ‚Üê Objet invalide');
console.log('headers: { \'Content-Type\': \'multipart/form-data\' }  ‚Üê Conflit');
console.log('');
console.log('APR√àS (fix):');
console.log('formData.append(\'video\', blob, \'golf-swing.mp4\')  ‚Üê Blob valide');
console.log('// Pas de Content-Type manuel  ‚Üê Auto-d√©tection');
console.log('');
console.log('üõ°Ô∏è Am√©liorations:');
console.log('‚Ä¢ Fallback automatique vers traitement local');
console.log('‚Ä¢ Logs d\'erreur d√©taill√©s du serveur');
console.log('‚Ä¢ Validation de taille avant envoi');
console.log('‚Ä¢ Gestion robuste des erreurs r√©seau');

console.log('\nüß™ Test maintenant:');
console.log('1. Recharge l\'app dans Expo Go');
console.log('2. Va sur l\'onglet "Analyse"');
console.log('3. S√©lectionne une vid√©o');
console.log('4. L\'analyse devrait fonctionner (serveur ou local)');
console.log('5. V√©rifie les logs pour voir quelle m√©thode est utilis√©e');

console.log('\n‚úÖ Fix serveur vid√©o appliqu√© !');
console.log('üé¨ L\'analyse vid√©o devrait maintenant fonctionner');